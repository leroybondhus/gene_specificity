library('tidyr')
library('dplyr') 
library('tibble') 
library('RColorBrewer') 
library('ggplot2') 
library('lubridate') 
library('gridExtra')
library('devtools')
library('circlepackeR')
library('Hmisc')
library('ggpubr')
library('grid')
library('lattice')
library('gdata')
library('parallel')
library('doParallel')
library('data.table')
library('graphics')
library('viridis')

registerDoParallel(cores=4)





# loading te matrix
GTEX.data <- read.csv("gtex_medians_PC_only_wo_MT.csv", header=T, sep=",")

# function that drops certain columns from a te matrix by name
drop_cols <- function(te_matrix, ...){
  cols_to_drop <- list(...)
  for (col in cols_to_drop){
    a <- which(colnames(te_matrix)==col)
    te_matrix <- te_matrix[-a]
  }
  return(te_matrix)
}

# using above function to subset te matrix to only include tissue expression values
GTEX.subset <- drop_cols(GTEX.data,"X","Name","Description")

# subset data set to only include certain indices
drop_index <- function(te_matrix, ...){
  cols_to_drop <- list(...)
  name_list <- c()
  for (col in cols_to_drop){
    name_list <- append(name_list, colnames(te_matrix[col]))
  }
  for (name in name_list){
    a <- which(colnames(te_matrix)==name)
    te_matrix <- te_matrix[-a]
  }
  return(te_matrix)
}

# creating one dataset with no brain columns and one dataset with only brain columns
GTEX.NoBrain <- drop_index(GTEX.subset,8:20)
GTEX.Brain <- drop_index(GTEX.subset,1:7,21:54)

one_brain <- sample(GTEX.Brain,1) # used Substantia Nigra selection
GTEX.OneBrain <- cbind(GTEX.NoBrain, one_brain) 

# creating matrix that includes the rest of the brain samples
GTEX.TwelveBrain <- drop_cols(GTEX.Brain, colnames(one_brain))





# function to generate flat z-score for each gene in each tissue
specificity_by_zscore <- function(te_matrix){
  mean_expression <- rowMeans(te_matrix)
  std_expression <- apply(te_matrix,1,sd)
  zscore_matrix <- (te_matrix - mean_expression) / std_expression
  return(zscore_matrix)
}

# function to take the difference between each cell in a matrix; organizes matrices in same order
delta <- function(df_1,df_2){
  store1 <- as.data.frame(df_1)
  store2 <- as.data.frame(df_2)
  df_1 <- as.data.frame(df_1)
  df_2 <- as.data.frame(df_2)
  df_1_names <- row.names(df_1)
  df_2_names <- row.names(df_2)
  df_1$rowid <- df_1_names
  df_2$rowid <- df_2_names
  temp <- inner_join(df_1, df_2, by="rowid")
  df_1 <- temp[,1:ncol(store1)]
  df_2 <- temp[,(ncol(store1)+2):ncol(temp)]
  output <- list((df_1-df_2))
  return(output)
}





##### generating list of delta z-scores (flat) with baseline of 1

# creating df of flat P1 z-scores
flat_zscores_1 <- specificity_by_zscore(GTEX.OneBrain)
flat_zscores_1 <- na.omit(flat_zscores_1)

# creating list of dfs of flat P1 z-scores calculated based on added brain columns
permutation_flat_data_1 <- appended_te_to_flat_zscore(GTEX.OneBrain,GTEX.TwelveBrain,12,3)

# creating list of dfs of delta(flat P1 z-scores) One_Brain - Added_Brain_Samples
permutations <- c(1:length(permutation_flat_data_1[[2]]))
permutation_flat_data_1_results <- permutation_flat_data_1[[2]]
delta_flat_1 <- c()
for (i in permutations){
  output <- delta(flat_zscores_1,permutation_flat_data_1_results[i])
  delta_flat_1 <- append(delta_flat_1,output)
}

# plotting heatmap
copy_del_flat_1 <- delta_flat_1
copy_del_flat_hist_objs_1 <- data.frame(counts=numeric(), mids=numeric(), sample_num=numeric())
for (i in 1:12){
  copy_del_flat_temp_df_1 <- unlist(data.frame(copy_del_flat_1[[3*i]]))
  copy_del_flat_temp_hist_1 <- hist(copy_del_flat_temp_df_1, breaks = 100, plot=F)
  copy_del_flat_hist_objs_1 <- rbind(copy_del_flat_hist_objs_1, data.frame(counts=copy_del_flat_temp_hist_1$counts, mids=copy_del_flat_temp_hist_1$mids, sample_num=rep(i, length(copy_del_flat_temp_hist_1$counts))))
}
ggplot(copy_del_flat_hist_objs_1, aes(x=mids, y=sample_num, width=1, height=1)) +
  geom_tile(aes(fill=log10(counts)), alpha=1) +
  scale_fill_viridis_b() +
  labs(title="Change in Flat Z-Score for Added Brain Columns From N=1 to N=12", x="Change in Flat Z-Score", y="N = Number of Brain Columns Added", fill="log10(Counts)") + 
  theme(plot.title=element_text(hjust=0.5)) + scale_x_continuous(limits = c(-3,8), breaks = seq(-3,8,1)) + scale_y_continuous(limits = c(0.5,12.5), breaks=seq(0,12,1))
  
  
  
  
  
  ##### generating list of delta z-scores (weighted) with baseline of 1

# creating df of weighted P1 z-scores
weighted_similarity_zscores_1 <- te_to_weighted_zscore(GTEX.OneBrain,similarity_weights)

# creating list of dfs of weighted P1 z-scores calculated based on added brain columns
permutation_similarity_data_1 <- appended_te_to_weighted_zscore(GTEX.OneBrain,GTEX.TwelveBrain,similarity_weights,12,3)

# creating list of dfs of delta(weighted P1 z-scores) One_Brain - Added_Brain_samples
permutations <- c(1:length(permutation_similarity_data_1[[2]]))
permutation_similarity_data_1_results <- permutation_similarity_data_1[[2]]
delta_similarity_1 <- c()
for (i in permutations){
  output <- delta(weighted_similarity_zscores_1,permutation_similarity_data_1_results[i])
  delta_similarity_1 <- append(delta_similarity_1,output)
}

# plotting heatmap
copy_del_sim_1 <- delta_similarity_1
copy_del_sim_hist_objs_1 <- data.frame(counts=numeric(), mids=numeric(), sample_num=numeric())
for (i in 1:12){
  copy_del_sim_temp_df_1 <- unlist(data.frame(copy_del_sim_1[[3*i]]))
  copy_del_sim_temp_hist_1 <- hist(copy_del_sim_temp_df_1, breaks = 100, plot = F)
  copy_del_sim_hist_objs_1 <- rbind(copy_del_sim_hist_objs_1, data.frame(counts=copy_del_sim_temp_hist_1$counts, mids=copy_del_sim_temp_hist_1$mids, sample_num=rep(i, length(copy_del_sim_temp_hist_1$counts))))
}
ggplot(copy_del_sim_hist_objs_1, aes(x=mids, y=sample_num, width=1, height=1)) +
  geom_tile(aes(fill=log10(counts)), alpha=1) +
  scale_fill_viridis_b() +
  labs(title="Change in Weighted Z-Score for Added Brain Columns From N=1 to N=12", x="Change in Weighted Z-Score", y="N = Number of Brain Columns Added", fill="log10(Counts)") + 
  theme(plot.title=element_text(hjust=0.5)) + scale_x_continuous(limits = c(-3,8), breaks=seq(-3,8,1)) + scale_y_continuous(limits = c(0.5,12.5), breaks=seq(0,12,1))
  
  
  
  
  
  # variance for flat baseline 1
copy_del_flat_1_forvar <- delta_flat_1
var_for_n_flat_1 <- c()
for (i in 1:12){
  copy_del_flat_1_forvar_df <- unlist(data.frame(copy_del_flat_1_forvar[[3*i]]))
  temp <- var(copy_del_flat_1_forvar_df)
  var_for_n_flat_1 <- append(var_for_n_flat_1, temp)
}
plot(1:12, var_for_n_flat_1)

# variance for weighted baseline 1
copy_del_sim_1_forvar <- delta_similarity_1
var_for_n_sim_1 <- c()
for (i in 1:12){
  copy_del_sim_1_forvar_df <- unlist(data.frame(copy_del_sim_1_forvar[[3*i]]))
  temp <- var(copy_del_sim_1_forvar_df)
  var_for_n_sim_1 <- append(var_for_n_sim_1, temp)
}
plot(1:12, var_for_n_sim_1)

# red = flat variance
# blue = weighted variance
plot(var_for_n_flat_1,type = "o",col = "red",xlab="Number of Brain Columns Added",ylab="Variance of Change in Z-Score",main="Variance of Change in Z-Score for Weighted vs. Flat Method")

lines(var_for_n_sim_1, type = "o", col = "blue")

stepSize <- 1
xMax <- 12
numTicks <- xMax / stepSize
v1 <- c(0:numTicks)*stepSize
axis(side=1, at=v1, labels=v1)
